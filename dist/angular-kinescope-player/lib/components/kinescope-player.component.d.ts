import { ElementRef, OnDestroy } from '@angular/core';
import { KinescopePlayerConfig, VideoQuality } from '../interfaces';
import * as i0 from "@angular/core";
export declare class KinescopePlayerComponent implements OnDestroy {
    set config(config: KinescopePlayerConfig);
    _config: KinescopePlayerConfig;
    private document;
    private renderer2;
    private playerLoad;
    private player;
    private getNextPlayerId;
    private getNextIndex;
    parentsRef: ElementRef<unknown>;
    isPaused: () => Promise<boolean>;
    isEnded: () => Promise<boolean>;
    play: () => Promise<void>;
    pause: () => Promise<boolean>;
    stop: () => Promise<void>;
    getCurrentTime: () => Promise<number>;
    getDuration: () => Promise<number>;
    seekTo: (time: number) => Promise<void>;
    isMuted: () => Promise<boolean>;
    mute: () => Promise<void>;
    unmute: () => Promise<void>;
    getVolume: () => Promise<number>;
    setVolume: (value: number) => Promise<void>;
    getPlaybackRate: () => Promise<number>;
    setPlaybackRate: (value: number) => Promise<void>;
    getVideoQualityList: () => Promise<VideoQuality[]>;
    getCurrentVideoQuality: () => Promise<VideoQuality>;
    setVideoQuality: (quality: VideoQuality) => Promise<void>;
    enableTextTrack: (lang: string) => Promise<void>;
    disableTextTrack: () => Promise<void>;
    closeCTA: () => Promise<void>;
    isFullscreen: () => Promise<boolean>;
    setFullscreen: (fullscreen: boolean) => Promise<void>;
    handleJSLoad(): Promise<void>;
    ngOnDestroy(): void;
    private shouldPlayerUpdate;
    private shouldPlaylistUpdate;
    private updateTitleOptions;
    private updatePosterOptions;
    private updateSubtitleOptions;
    private updateDrmAuthTokenOptions;
    private updateChaptersOptions;
    private updateVttOptions;
    private updateBookmarksOptions;
    private updateActionsOptions;
    private readyPlaylistOptions;
    private create;
    private destroy;
    private getEventList;
    private getQueryParams;
    private makeURL;
    private getIFrameUrl;
    private createPlayer;
    private setPlaylistItemOptions;
    private handleEventReady;
    static ɵfac: i0.ɵɵFactoryDeclaration<KinescopePlayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<KinescopePlayerComponent, "kinescope-player", never, { "config": "config"; }, {}, never, never, true>;
}
